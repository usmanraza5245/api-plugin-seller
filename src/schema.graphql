input accountBookInput {
  AccountTitle: String
  swiftCode: String
  AccountNo: String
  isActive: Boolean
  AccountId: ID!
  AccountBookId: ID
}

type AccountBook {
  _id: ID!
  AccountTitle: String
  swiftCode: String
  AccountNo: String
  isActive: Boolean
}

input AvailableFulfillmentMethodInput {
  AccountId: ID!
  FulfillmentMethodId: ID!
  status: Boolean!
}

scalar AvailableFulfillmentMethod
type deleteOutput {
  success: Boolean
  message: String
  status: Int
}
input updatePassword {
  email: String!
  password: String!
}
type updatePasswordOutPut {
  success: Boolean
  message: String
  status: Int
}

input VieworCartInput {
  productId: String!
  flag: String!
}
type output {
  success: Boolean
  status: Int
  message: String
}
extend type Mutation {
  deleteAccount(userId: String!): deleteOutput
  updateUserPassword(input: updatePassword): updatePasswordOutPut
  updateAccountpayBookEntry(input: accountBookInput): AccountBook
  updateAvailableFulfillmentMethodEntry(
    input: AvailableFulfillmentMethodInput
  ): [AvailableFulfillmentMethod]
  addProductVieworCart(input: VieworCartInput): output
}

extend type Product {
  uploadedBy: uploadedBy
  upVotes: Int
  productViews: Int
  totalCarts: Int
  ancestorId: ID
  referenceTrack: String
  tokenCount: Int
  parentId: ID
}
extend input ProductInput {
  uploadedBy: uploadedByinput
  upVotes: Int
  referenceTrack: String
  tokenCount: Int
  productViews: Int
  totalCarts: Int
}

extend type CatalogProduct {
  uploadedBy: uploadedBy
  upVotes: Int
  ancestorId: ID
  tokenCount: Int
  parentId: ID
}
type uploadedBy {
  name: String
  image: String
  userId: ID
  FulfillmentMethods: [AvailableFulfillmentMethod]
}
input uploadedByinput {
  name: String
  image: String
  userId: ID
}
extend type Account {
  Product: [Product]
  identityVerified: Boolean
  orderFulfillment: [Order]
  AccountBook: [AccountBook]
  AvailableFulfillmentMethods: [AvailableFulfillmentMethod]
}
